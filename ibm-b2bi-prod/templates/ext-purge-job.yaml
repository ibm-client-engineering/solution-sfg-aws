# (C) Copyright 2019-2022 Syncsort Incorporated. All rights reserved.

{{- include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- if .Values.purge.enabled }}
{{- $resourcesPVCName := .sch.chart.components.appResourcesPVC.name }}
{{- $logsPVCName := .sch.chart.components.appLogsPVC.name }}
{{- $documentsPVCName := .sch.chart.components.appDocumentsPVC.name }}
{{- $ibmsecretexist := (empty (lookup "v1" "Secret" .Release.Namespace .sch.chart.components.ibmDefaultPullSecret.name)) | ternary "false" "true"  }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.extPurge.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.extPurge.name) | indent 4 }}
spec:
  schedule: "{{ .Values.purge.schedule }}"
  startingDeadlineSeconds: {{ .Values.purge.startingDeadlineSeconds }}
  #activeDeadlineSeconds: {{ .Values.purge.activeDeadlineSeconds }}
  concurrencyPolicy: {{ .Values.purge.concurrencyPolicy | default "Forbid" }}
  suspend: {{ .Values.purge.suspend | default false }}
  successfulJobsHistoryLimit: {{ .Values.purge.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.purge.failedJobsHistoryLimit | default 1 }}
  jobTemplate:
    spec:
      template:
        metadata:
          name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.extPurge.name) | quote }}
          labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.extPurge.name) | indent 12 }}
          annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.nonMetering.nonChargeableProductMetric nil "ext-purge") | indent 12 }}
            checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}        
        spec:
          serviceAccountName: {{ .Values.serviceAccount.name  | quote }}
          hostNetwork: false
          hostPID: false
          hostIPC: false
          securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 12 }}
          volumes:
            {{- if .Values.appResourcesPVC.enabled }}
            - name: "{{ .sch.chart.components.appResourcesPVC.name }}"
            {{- if .Values.persistence.enabled }}
              persistentVolumeClaim:
                claimName: {{ (empty .Values.appResourcesPVC.preDefinedResourcePVCName) | ternary (include "sch.names.fullCompName" (list . $resourcesPVCName) | quote) (.Values.appResourcesPVC.preDefinedResourcePVCName | quote) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            {{- end }}
            {{- if not .Values.logs.enableAppLogOnConsole }}   
            - name: {{ .sch.chart.components.appLogsPVC.name }}
            {{- if .Values.persistence.enabled }}
              persistentVolumeClaim:
                claimName: {{ (empty .Values.appLogsPVC.preDefinedLogsPVCName) | ternary (include "sch.names.fullCompName" (list . $logsPVCName) | quote) (.Values.appLogsPVC.preDefinedLogsPVCName | quote) }}
            {{- else }}
              emptyDir: {}
            {{- end }}
            {{- end }} 
            {{- if .Values.appDocumentsPVC.enabled }}
            - name: "{{ .sch.chart.components.appDocumentsPVC.name }}"
            {{- if .Values.persistence.enabled }}
              persistentVolumeClaim:
                claimName: {{ (empty .Values.appDocumentsPVC.preDefinedDocumentPVCName) | ternary (include "sch.names.fullCompName" (list . $documentsPVCName) | quote) (.Values.appDocumentsPVC.preDefinedDocumentPVCName | quote) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
              {{- end }}
            - name: configmap-resources-volume
              configMap:
                name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }}
            {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
            - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
              secret:
                secretName: {{ .Values.setupCfg.dbTruststoreSecret }}
            {{- end }}
            {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
            - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
              secret:
                secretName: {{ .Values.setupCfg.dbKeystoreSecret }}
            {{- end }}                           
            {{- if .Values.resourcesInit.enabled}}
            - name: resourcesdir
              emptyDir: {}
            {{- end }}
          {{- if or (.Values.purge.image.pullSecret) (.Values.global.image.pullSecret) (eq $ibmsecretexist "true") }}
          imagePullSecrets:
          {{- if .Values.purge.image.pullSecret }}
            - name: {{ .Values.purge.image.pullSecret }}
          {{- else if .Values.global.image.pullSecret}}
            - name: {{ .Values.global.image.pullSecret }}
          {{- else }}
            - name: "{{ .sch.chart.components.ibmDefaultPullSecret.name }}"
          {{- end }}
          {{- end }}
          {{- if .Values.resourcesInit.enabled}}
          initContainers:
          - name: "resources-init"
            {{- if .Values.resourcesInit.image.digest }}
            image: "{{ .Values.resourcesInit.image.repository }}/{{ .Values.resourcesInit.image.name }}@{{ .Values.resourcesInit.image.digest }}"
            {{- else }}
            image: "{{ .Values.resourcesInit.image.repository }}/{{ .Values.resourcesInit.image.name }}:{{ .Values.resourcesInit.image.tag }}"
            {{- end }}
            imagePullPolicy: "{{ .Values.resourcesInit.image.pullPolicy }}"
            command: 
            {{- toYaml .Values.resourcesInit.command | nindent 14 }}
            securityContext:
            {{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 14 }}
            env:
              - name: "DB_VENDOR"
                value: "{{ .Values.setupCfg.dbVendor }}"
              - name: "RESOURCES_DIR_MOUNT"
                value: {{ .Values.resourcesInit.mountPath | default "/ibm/resources" | quote }}
            volumeMounts:
            - name: resourcesdir
              mountPath: {{ .Values.resourcesInit.mountPath | default "/ibm/resources" }}
          {{- end }}
          containers:
            - name: "ext-purge"
              {{- if .Values.purge.image.digest }}
              image: "{{ .Values.purge.image.repository }}@{{ .Values.purge.image.digest }}"
              {{- else }}
              image: "{{ .Values.purge.image.repository }}:{{ .Values.purge.image.tag }}"
              {{- end }}
              imagePullPolicy: {{ .Values.purge.image.pullPolicy }}
              env:
                - name: "TZ"
                  value: "{{ .Values.env.tz }}"
                {{- if .Values.global.license }}
                - name: "LICENSE"
                  value: "accept"
                {{- end }}
                - name: "UPGRADE_COMPATIBILITY_VERIFIED"
                  value: "{{ .Values.env.upgradeCompatibilityVerified }}"
                - name: "ACTIVE_DEADLINE"
                  value: "{{  .Values.purge.activeDeadlineSeconds | default 0 }}"
                - name: "ENABLE_APP_LOG_ON_CONSOLE"
                  value: "{{ .Values.logs.enableAppLogOnConsole }}"
                - name: "JAVA_TOOL_OPTIONS"
                  value: "{{ .Values.purge.env.jvmOptions }}"
                - name: "SANDBOX_CC_INSTALL"
                  value: {{ .Values.env.containerInstallation | default "true" | quote }}
                - name: "SANDBOX_CC_SERVICE_TYPE"
                  value: "purge"
                {{- with .Values.env.extraEnvs }}
                {{- toYaml . | nindent 16 }}
                {{- end }}
                {{- with .Values.purge.env.extraEnvs }}
                {{- toYaml . | nindent 16 }}
                {{- end }}                
              envFrom:
{{if .Values.setupCfg.systemPassphraseSecret}}
              - secretRef:
                  name: "{{ .Values.setupCfg.systemPassphraseSecret }}"
{{ end }}
{{if .Values.setupCfg.dbSecret}}
              - secretRef:
                  name: "{{ .Values.setupCfg.dbSecret }}"
{{ end }}
              securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 16 }}
              volumeMounts:
                {{- if .Values.appResourcesPVC.enabled }}
                - name: {{ .sch.chart.components.appResourcesPVC.name }}
                  mountPath: /ibm/resources
                {{- end }}
                {{- if not .Values.logs.enableAppLogOnConsole }}  
                - name: {{ .sch.chart.components.appLogsPVC.name }}
                  mountPath: /ibm/trace
                {{- end }}
                {{- if .Values.appDocumentsPVC.enabled }}  
                - name: {{ .sch.chart.components.appDocumentsPVC.name }}
                  mountPath: {{ .Values.appDocumentsPVC.mountPath | default "/ibm/b2bi/install/documents" }}
                {{- end }}
                - name: configmap-resources-volume
                  mountPath: /ibm/resources/setup.cfg
                  subPath: setup.cfg
                {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
                - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
                  mountPath: /ibm/resources/{{ .Values.setupCfg.dbTruststoreSecret }}
                {{- end }}
                {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
                - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
                  mountPath: /ibm/resources/{{ .Values.setupCfg.dbKeystoreSecret }}
                {{- end }}                                 
                {{- if .Values.resourcesInit.enabled}}
                - name: resourcesdir
                  mountPath: /ibm/resources
                {{- end }}
              args: ["b2bi_purge", "start"]
              resources:
              {{- toYaml .Values.purge.resources | nindent 16 }}
          restartPolicy: Never
          affinity:
{{- include "b2bi.nodeAffinity" (list . .Values.purge.nodeAffinity) | indent 12 }}
{{- end }}
