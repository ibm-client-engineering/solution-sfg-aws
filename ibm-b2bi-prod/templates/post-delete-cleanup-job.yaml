# (C) Copyright 2019-2022 Syncsort Incorporated. All rights reserved.

{{ include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- $resourcesPVCName := .sch.chart.components.appResourcesPVC.name -}}
{{- $logsPVCName := .sch.chart.components.appLogsPVC.name -}}
{{- $documentsPVCName := .sch.chart.components.appDocumentsPVC.name -}}
{{- $ibmsecretexist := ((empty (lookup "v1" "Secret" .Release.Namespace .sch.chart.components.ibmDefaultPullSecret.name)) | ternary "false" "true") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.cleanupJob.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.cleanupJob.name) | indent 4 }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": "hook-succeeded, before-hook-creation"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.cleanupJob.name) | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.cleanupJob.name) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.nonMetering.nonChargeableProductMetric nil "deleteCleanup") | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name  | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContextTest) | indent 8 }}
      {{- if or (.Values.global.image.pullSecret) (eq $ibmsecretexist "true") }}
      imagePullSecrets:
      {{- if .Values.global.image.pullSecret }}
        - name: {{ .Values.global.image.pullSecret }}
      {{- else }}
        - name: "{{ .sch.chart.components.ibmDefaultPullSecret.name }}"
      {{- end }}
      {{- end }}
      containers:
      - name: cleanup
        {{- if .Values.test.image.digest }}
        image:  "{{ .Values.test.image.repository }}/{{ .Values.test.image.name }}@{{ .Values.test.image.digest }}"
        {{- else }}
        image:  "{{ .Values.test.image.repository }}/{{ .Values.test.image.name }}:{{ .Values.test.image.tag }}"
        {{- end }}
        imagePullPolicy:  "{{ .Values.test.image.pullPolicy }}"
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContextTest) | indent 10 }}
        command:
        - "/bin/bash"
        - -c
        - |
          set -ex
          echo "starting cleanup..."
          echo "release namespace - {{ .Release.Namespace }}"
          if kubectl get configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }} ; then
             echo "cleaning up config map..."
             kubectl delete configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }}
          fi
          if kubectl get configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.propertyConfigmap.name) | quote }} ; then
             echo "cleaning up config map..."
             kubectl delete configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.propertyConfigmap.name) | quote }}
          fi 
          if kubectl get configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.servicesConfigmap.name) | quote }} ; then
             echo "cleaning up services config map..."
             kubectl delete configmap -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.servicesConfigmap.name) | quote }}
          fi          
          {{- if .Values.persistence.enabled }}
          if kubectl get pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $resourcesPVCName) | quote }} ; then\
             echo "cleaning up resources pvc..."
             kubectl delete pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $resourcesPVCName) | quote }}
          fi
          {{- if not .Values.logs.enableAppLogOnConsole }}
          if kubectl get pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $logsPVCName) | quote }} ; then
             echo "cleaning up logs pvc..."
             kubectl delete pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $logsPVCName) | quote }}
          fi
          {{ end }}
          {{- if .Values.appDocumentsPVC.enabled }}
          if kubectl get pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $documentsPVCName) | quote }} ; then
             echo "cleaning up documents pvc..."
             kubectl delete pvc -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . $documentsPVCName) | quote }}
          fi
          {{ end }}
          {{ range $i, $pvc := .Values.ac.extraPVCs -}}
          if kubectl get pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }} ; then
             kubectl delete pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
          fi
          {{ end }}
          {{ range $i, $pvc := .Values.api.extraPVCs -}}
          if kubectl get pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }} ; then
             kubectl delete pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
          fi
          {{ end }}
          {{ range $i, $pvc := .Values.asi.extraPVCs -}}
          if kubectl get pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }} ; then
             kubectl delete pvc -n {{ $.Release.Namespace }} {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
          fi
          {{ end }}
          {{ end }}
          if kubectl get pods -n {{ .Release.Namespace }} {{ .Release.Name }}-test-config ; then
             echo "cleaning up test pod..."
             kubectl delete pods -n {{ .Release.Namespace }} {{ .Release.Name }}-test-config
          fi
          if kubectl get cronjob -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.extPurge.name) | quote }} ; then
             echo "cleaning up external purge cron job..."
             kubectl delete cronjob -n {{ .Release.Namespace }} {{ include "sch.names.fullCompName" (list . .sch.chart.components.extPurge.name) | quote }}
          fi
          
        resources:
          requests:
            memory: 128Mi
            cpu: 10m
            ephemeral-storage: "16Mi"
          limits:
            memory: 128Mi
            cpu: 50m
            ephemeral-storage: "32Mi"
      affinity:
{{- include "b2bi.architectureAffinity" . | indent 8 }}
      restartPolicy: Never
